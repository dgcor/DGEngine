name: Deploy_Linux

on:
  workflow_dispatch:

jobs:
  deploy_linux:
    name: linux deploy
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout DGEngine
      uses: actions/checkout@v3

    - name: Restore cached dependencies
      id: cache-linux-x64
      uses: actions/cache@v3
      with:
        path: /home/runner/work/sfml
        key: cache-linux-x64

    - name: Install dependencies
      run: |
        sudo apt install -yq --no-install-suggests --no-install-recommends fuse > /dev/null
        sudo apt install -yq --no-install-suggests --no-install-recommends libphysfs-dev > /dev/null
        sudo apt install -yq --no-install-suggests --no-install-recommends libalut-dev libflac-dev libgl1-mesa-dev libudev-dev libvorbis-dev libxcursor-dev libxrandr-dev > /dev/null
        sudo apt install -yq --no-install-suggests --no-install-recommends libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswscale-dev > /dev/null

    - name: CMake build and install SFML
      if: steps.cache-linux-x64.outputs.cache-hit != 'true'
      run: |
        git clone -q --depth=1 --branch=feature/scancode https://github.com/dgcor/SFML.git /home/runner/work/sfml > /dev/null
        git -C /home/runner/work/sfml pull > /dev/null
        cd /home/runner/work/sfml
        export CC=/usr/bin/gcc-11
        export CXX=/usr/bin/g++-11
        cmake /home/runner/work/sfml/CMakeLists.txt
        sudo cmake --build . --config Release --target install

    - name: Install SFML
      if: steps.cache-linux-x64.outputs.cache-hit == 'true'
      run: |
        cd /home/runner/work/sfml
        sudo make install

    - name: Setup Ninja Build
      uses: turtlesec-no/get-ninja@main

    - name: CMake build DGEngine
      run: |
        export CC=/usr/bin/gcc-11
        export CXX=/usr/bin/g++-11
        cmake CMakeLists.txt -G "Ninja"
        cmake --build . --config Release

    - name: Install LinuxDeploy
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -N
        chmod +x linuxdeploy-x86_64.AppImage

    - name: Create AppImage
      run: |
        ./linuxdeploy-x86_64.AppImage \
          --executable=DGEngine \
          --appdir out/appdir \
          --desktop-file=pkg/linux/dgengine.desktop \
          --icon-file=pkg/linux/icon.png \
          --output=appimage
        mv DGEngine-*-x86_64.AppImage DGEngine-x86_64.AppImage

    - name: Create DGEngine zip
      run: 7z a DGEngine-linux-x86_64.AppImage.zip DGEngine-x86_64.AppImage LICENSE.* README.* main.json gamefiles*

    - name: Create AppImage with movie support
      run: |
        ./linuxdeploy-x86_64.AppImage \
          --executable=DGEngine \
          --library=/lib/x86_64-linux-gnu/libavcodec.so.58 \
          --library=/lib/x86_64-linux-gnu/libavformat.so.58 \
          --library=/lib/x86_64-linux-gnu/libavutil.so.56 \
          --library=/lib/x86_64-linux-gnu/libswresample.so.3 \
          --library=/lib/x86_64-linux-gnu/libswscale.so.5 \
          --appdir out/appdir \
          --desktop-file=pkg/linux/dgengine.desktop \
          --icon-file=pkg/linux/icon.png \
          --output=appimage
        mv -f DGEngine-*-x86_64.AppImage DGEngine-x86_64.AppImage

    - name: Create DGEngine zip with movie support
      run: 7z a DGEngine-linux-ffmpeg-x86_64.AppImage.zip DGEngine-x86_64.AppImage LICENSE.* README.* main.json gamefiles*

    - name: Create DGEngine zip artifact
      uses: actions/upload-artifact@v3
      with:
        name: artifact-DGEngine-linux-x86_64
        path: DGEngine-linux-x86_64.AppImage.zip

    - name: Create DGEngine zip artifact with movie support
      uses: actions/upload-artifact@v3
      with:
        name: artifact-DGEngine-linux-ffmpeg-x86_64
        path: DGEngine-linux-ffmpeg-x86_64.AppImage.zip
