name: Deploy_Linux

on:
  workflow_dispatch:

env:
    VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  deploy_linux:
    name: linux deploy
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout DGEngine
      uses: actions/checkout@v3

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install GCC 11
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 11

    - name: Install Ubuntu dependencies
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: fuse libx11-dev libxrandr-dev libxcursor-dev libxi-dev libudev-dev libgl1-mesa-dev libavcodec-dev libavdevice-dev libavfilter-dev libavformat-dev libavutil-dev libswscale-dev
        version: 1.0
        execute_install_scripts: true

    - name: Install dependencies
      run: |
        vcpkg install physfs sfml --triplet=x64-linux

    - name: Setup Ninja Build
      uses: turtlesec-no/get-ninja@main

    - name: CMake build DGEngine
      run: |
        export CC=/usr/bin/gcc-11
        export CXX=/usr/bin/g++-11
        cmake --preset linux-x64-release-publish -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake
        cmake --build --preset linux-x64-release-publish

    - name: Install LinuxDeploy
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage -N
        chmod +x linuxdeploy-x86_64.AppImage

    - name: Create AppImage
      run: |
        ./linuxdeploy-x86_64.AppImage \
          --executable=out/build/linux-x64-release-publish/DGEngine \
          --appdir out/appdir \
          --desktop-file=pkg/linux/dgengine.desktop \
          --icon-file=pkg/linux/icon.png \
          --output=appimage

    - name: Create DGEngine zip
      run: 7z a DGEngine-linux-x86_64.AppImage.zip DGEngine-x86_64.AppImage LICENSE.* README.* main.json gamefiles*

    - name: Create AppImage with movie support
      run: |
        ./linuxdeploy-x86_64.AppImage \
          --executable=out/build/linux-x64-release-publish/DGEngine \
          --library=/lib/x86_64-linux-gnu/libavcodec.so.58 \
          --library=/lib/x86_64-linux-gnu/libavformat.so.58 \
          --library=/lib/x86_64-linux-gnu/libavutil.so.56 \
          --library=/lib/x86_64-linux-gnu/libswresample.so.3 \
          --library=/lib/x86_64-linux-gnu/libswscale.so.5 \
          --appdir out/appdir \
          --desktop-file=pkg/linux/dgengine.desktop \
          --icon-file=pkg/linux/icon.png \
          --output=appimage

    - name: Create DGEngine zip with movie support
      run: 7z a DGEngine-linux-ffmpeg-x86_64.AppImage.zip DGEngine-x86_64.AppImage LICENSE.* README.* main.json gamefiles*

    - name: Create DGEngine zip artifact
      uses: actions/upload-artifact@v3
      with:
        name: artifact-DGEngine-linux-x86_64.AppImage
        path: DGEngine-linux-x86_64.AppImage.zip

    - name: Create DGEngine zip artifact with movie support
      uses: actions/upload-artifact@v3
      with:
        name: artifact-DGEngine-linux-ffmpeg-x86_64.AppImage
        path: DGEngine-linux-ffmpeg-x86_64.AppImage.zip
